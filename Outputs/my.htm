<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Outputs\my.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Outputs\my.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 4.1 [Build 481]: Last Updated: Tue Mar 29 17:22:17 2016
<BR><P>
<H3>Maximum Stack Usage =        704 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; init_loop &rArr; attitude_compute &rArr; marg_update &rArr; glob2body &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[e]">Reset_Handler</a>
 <LI><a href="#[d5]">__user_initial_stackheap</a>
 <LI><a href="#[f]">Undef_Handler</a>
 <LI><a href="#[10]">SWI_Handler</a>
 <LI><a href="#[11]">PAbt_Handler</a>
 <LI><a href="#[12]">DAbt_Handler</a>
 <LI><a href="#[13]">IRQ_Handler</a>
 <LI><a href="#[14]">FIQ_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[f]">Undef_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">Undef_Handler</a><BR>
 <LI><a href="#[10]">SWI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">SWI_Handler</a><BR>
 <LI><a href="#[11]">PAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">PAbt_Handler</a><BR>
 <LI><a href="#[12]">DAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">DAbt_Handler</a><BR>
 <LI><a href="#[13]">IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">IRQ_Handler</a><BR>
 <LI><a href="#[14]">FIQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">FIQ_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[e]">Reset_Handler</a> from sam7.o(RESET) referenced from sam7.o(RESET)
 <LI><a href="#[f]">Undef_Handler</a> from sam7.o(RESET) referenced from sam7.o(RESET)
 <LI><a href="#[10]">SWI_Handler</a> from sam7.o(RESET) referenced from sam7.o(RESET)
 <LI><a href="#[11]">PAbt_Handler</a> from sam7.o(RESET) referenced from sam7.o(RESET)
 <LI><a href="#[12]">DAbt_Handler</a> from sam7.o(RESET) referenced from sam7.o(RESET)
 <LI><a href="#[13]">IRQ_Handler</a> from sam7.o(RESET) referenced from sam7.o(RESET)
 <LI><a href="#[14]">FIQ_Handler</a> from sam7.o(RESET) referenced from sam7.o(RESET)
 <LI><a href="#[18]">__main</a> from __main.o(!!!main) referenced from sam7.o(RESET)
 <LI><a href="#[16]">main</a> from main.o(.text) referenced from rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
 <LI><a href="#[17]">AT91F_UDP_IsConfigured</a> from usb.o(.text) referenced from usb.o(.text)
 <LI><a href="#[2a]">ppm_ms_clock_int_handler</a> from timer.o(.text) referenced from timer.o(.text)
 <LI><a href="#[7e]">pit_int_handler</a> from pit.o(.text) referenced from pit.o(.text)
 <LI><a href="#[8b]">spi_int_handler</a> from spi.o(.text) referenced from spi.o(.text)
 <LI><a href="#[fb]">_f2d</a> from f2d.o(x$fpl$f2d) referenced from dsqrt_noumaal.o(x$fpl$dsqrt)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[e]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sam7.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> sam7.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[19]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[1b]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[10e]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[10f]"></a>__decompress</STRONG> (ARM, 92 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[110]"></a>__decompress1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[111]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[1c]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init &rArr; _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li (via Veneer)
</UL>

<P><STRONG><a name="[112]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[113]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000028))

<P><STRONG><a name="[114]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[115]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[116]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[117]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[118]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[119]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[11a]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[11b]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))

<P><STRONG><a name="[11c]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[11d]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[11e]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[11f]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[120]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[121]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))

<P><STRONG><a name="[122]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[123]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[124]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[24]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls (via Veneer)
</UL>

<P><STRONG><a name="[125]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[126]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[127]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[128]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[129]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[12a]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[1a]"></a>__rt_entry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[12b]"></a>__rt_entry_presh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[1e]"></a>__rt_entry_sh</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[20]"></a>__rt_entry_li</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_li &rArr; __rt_lib_init &rArr; _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[12c]"></a>__rt_entry_postsh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[21]"></a>__rt_entry_main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BX)
</UL>

<P><STRONG><a name="[12d]"></a>__rt_entry_postli_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[d7]"></a>__rt_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via Veneer)
</UL>

<P><STRONG><a name="[23]"></a>__rt_exit_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (via Veneer)
</UL>

<P><STRONG><a name="[12e]"></a>__rt_exit_prels_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[25]"></a>__rt_exit_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit (via Veneer)
</UL>

<P><STRONG><a name="[77]"></a>constrain</STRONG> (ARM, 44 bytes, Stack size 0 bytes, commons.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_motors
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_control
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rc
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;altitude_control
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_converted
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;force2output
</UL>

<P><STRONG><a name="[c8]"></a>dead_zone</STRONG> (ARM, 48 bytes, Stack size 0 bytes, commons.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rc
</UL>

<P><STRONG><a name="[27]"></a>constrain_f</STRONG> (ARM, 76 bytes, Stack size 16 bytes, commons.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = constrain_f &rArr; __aeabi_cfcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_pos_corr
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zero_pos_corr
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marg_update
</UL>

<P><STRONG><a name="[c5]"></a>minimum</STRONG> (ARM, 28 bytes, Stack size 0 bytes, commons.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_pos_corr
</UL>

<P><STRONG><a name="[12f]"></a>maximum</STRONG> (ARM, 28 bytes, Stack size 0 bytes, commons.o(.text), UNUSED)

<P><STRONG><a name="[2a]"></a>ppm_ms_clock_int_handler</STRONG> (ARM, 72 bytes, Stack size 12 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ppm_ms_clock_int_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(.text)
</UL>
<P><STRONG><a name="[61]"></a>ppm_clock_init</STRONG> (ARM, 140 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2b]"></a>ppm_get_time</STRONG> (ARM, 48 bytes, Stack size 8 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_handler
</UL>

<P><STRONG><a name="[7c]"></a>ppm_reset_clock</STRONG> (ARM, 36 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_handler
</UL>

<P><STRONG><a name="[2d]"></a>timer_int_handler</STRONG> (ARM, 352 bytes, Stack size 32 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dma_refill
</UL>

<P><STRONG><a name="[62]"></a>timer_init</STRONG> (ARM, 140 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[71]"></a>delay_ms</STRONG> (ARM, 32 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quarternion_init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmc5883_config
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_calibration
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611_init
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2f]"></a>timer_get</STRONG> (ARM, 48 bytes, Stack size 8 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_handler
</UL>

<P><STRONG><a name="[130]"></a>timer_reset</STRONG> (ARM, 36 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[30]"></a>data_select</STRONG> (ARM, 1156 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = data_select &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process50Hz
</UL>

<P><STRONG><a name="[35]"></a>Process250Hz_A</STRONG> (ARM, 236 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Process250Hz_A &rArr; position_control &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_thrust_force
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_control
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manual_R_sp_generate
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;altitude_control
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_write_Raspberry
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Qsp2Rsp
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3c]"></a>Process250Hz_B</STRONG> (ARM, 360 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Process250Hz_B &rArr; gps_pos_corr &rArr; gps2xyz &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_pos_corr
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gps_data
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_altitude
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data2tempeture
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data2pressure
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;continue_cps_read
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baro_pos_corr
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4c]"></a>ground_work_once</STRONG> (ARM, 4 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process50Hz
</UL>

<P><STRONG><a name="[45]"></a>Process50Hz</STRONG> (ARM, 748 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = Process50Hz &rArr; get_rc &rArr; body2glob &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sonar_pos_corr
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_variables
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refill_tx
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_cut
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_ctrl
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_pos_init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rc
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_start_conversion
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_converted
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ground_work_once
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_select
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[52]"></a>Process500Hz</STRONG> (ARM, 68 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = Process500Hz &rArr; attitude_compute &rArr; marg_update &rArr; glob2body &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_motors
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pos_predict
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_cut
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attitude_control
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attitude_compute
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[74]"></a>self_check</STRONG> (ARM, 128 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[57]"></a>init_loop</STRONG> (ARM, 1040 bytes, Stack size 80 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = init_loop &rArr; attitude_compute &rArr; marg_update &rArr; glob2body &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_pos_init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_pos_corr
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glob2body
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gps_data
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_geo_acc
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data2tempeture
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data2pressure
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;corr_geo_acc
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attitude_compute
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16]"></a>main</STRONG> (ARM, 600 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = main &rArr; init_loop &rArr; attitude_compute &rArr; marg_update &rArr; glob2body &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xbee_init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_fast_init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_fast_init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quarternion_init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pit_init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6000_config
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_cut
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_ctrl
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_IIR_init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmc5883_config
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_calibration
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_start_conversion
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_read_Raspberry
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_read_Process
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_check
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_armed
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611_init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_loop
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_check
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process500Hz
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process50Hz
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process250Hz_B
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process250Hz_A
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppm_clock_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P><STRONG><a name="[6e]"></a>adc_init</STRONG> (ARM, 76 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4f]"></a>adc_start_conversion</STRONG> (ARM, 16 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process50Hz
</UL>

<P><STRONG><a name="[4d]"></a>adc_get_converted</STRONG> (ARM, 80 bytes, Stack size 16 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = adc_get_converted &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process50Hz
</UL>

<P><STRONG><a name="[131]"></a>gps_int_handler</STRONG> (ARM, 348 bytes, Stack size 8 bytes, gps.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>gps_init</STRONG> (ARM, 224 bytes, Stack size 0 bytes, gps.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[78]"></a>char_to_float</STRONG> (ARM, 376 bytes, Stack size 56 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = char_to_float &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gps_data
</UL>

<P><STRONG><a name="[43]"></a>get_gps_data</STRONG> (ARM, 1300 bytes, Stack size 88 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = get_gps_data &rArr; char_to_float &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_to_float
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_loop
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process250Hz_B
</UL>

<P><STRONG><a name="[7b]"></a>PIO_handler</STRONG> (ARM, 416 bytes, Stack size 40 bytes, pio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_get
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppm_reset_clock
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppm_get_time
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[7d]"></a>usb_in_pin</STRONG> (ARM, 64 bytes, Stack size 0 bytes, pio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_init
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_write_Raspberry
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_written_Callback
</UL>

<P><STRONG><a name="[5e]"></a>pio_init</STRONG> (ARM, 280 bytes, Stack size 4 bytes, pio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = pio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_in_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4b]"></a>led_ctrl</STRONG> (ARM, 168 bytes, Stack size 0 bytes, pio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process50Hz
</UL>

<P><STRONG><a name="[4e]"></a>beep</STRONG> (ARM, 64 bytes, Stack size 0 bytes, pio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_loop
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process50Hz
</UL>

<P><STRONG><a name="[7e]"></a>pit_int_handler</STRONG> (ARM, 44 bytes, Stack size 8 bytes, pit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pit_int_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pit.o(.text)
</UL>
<P><STRONG><a name="[60]"></a>pit_init</STRONG> (ARM, 60 bytes, Stack size 0 bytes, pit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[80]"></a>pwm_configure_channel</STRONG> (ARM, 100 bytes, Stack size 4 bytes, pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = pwm_configure_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>

<P><STRONG><a name="[7f]"></a>pwm_configure_clock</STRONG> (ARM, 12 bytes, Stack size 0 bytes, pwm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>

<P><STRONG><a name="[81]"></a>pwm_set_period</STRONG> (ARM, 72 bytes, Stack size 0 bytes, pwm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>

<P><STRONG><a name="[82]"></a>pwm_set_duty_cycle</STRONG> (ARM, 72 bytes, Stack size 0 bytes, pwm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_motors
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_cut
</UL>

<P><STRONG><a name="[132]"></a>pwm_disable_channel</STRONG> (ARM, 20 bytes, Stack size 0 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>pwm_enable_channel</STRONG> (ARM, 20 bytes, Stack size 0 bytes, pwm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>

<P><STRONG><a name="[5f]"></a>pwm_init</STRONG> (ARM, 336 bytes, Stack size 4 bytes, pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pwm_init &rArr; pwm_configure_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_enable_channel
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set_duty_cycle
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set_period
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_configure_clock
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_configure_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4a]"></a>motor_cut</STRONG> (ARM, 60 bytes, Stack size 4 bytes, pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = motor_cut
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set_duty_cycle
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process500Hz
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process50Hz
</UL>

<P><STRONG><a name="[68]"></a>spi_init</STRONG> (ARM, 232 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[85]"></a>spi_read_write</STRONG> (ARM, 100 bytes, Stack size 4 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = spi_read_write
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611_RESET
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_reg
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_reg
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_1_read_2
</UL>

<P><STRONG><a name="[84]"></a>spi_write_1_read_2</STRONG> (ARM, 84 bytes, Stack size 24 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = spi_write_1_read_2 &rArr; spi_read_write
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_write
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611_init
</UL>

<P><STRONG><a name="[86]"></a>spi_read_reg</STRONG> (ARM, 60 bytes, Stack size 16 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = spi_read_reg &rArr; spi_read_write
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_write
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6000_config
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6000_read_all
</UL>

<P><STRONG><a name="[87]"></a>spi_write_reg</STRONG> (ARM, 64 bytes, Stack size 20 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = spi_write_reg &rArr; spi_read_write
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_write
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6000_config
</UL>

<P><STRONG><a name="[88]"></a>spi_dma_decode</STRONG> (ARM, 988 bytes, Stack size 32 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = spi_dma_decode &rArr; acc_lowpass_biascorr &rArr; IIR_apply &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_lowpass_biascorr
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_lowpass_biascorr
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_int_handler
</UL>

<P><STRONG><a name="[8b]"></a>spi_int_handler</STRONG> (ARM, 120 bytes, Stack size 32 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = spi_int_handler &rArr; spi_dma_decode &rArr; acc_lowpass_biascorr &rArr; IIR_apply &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dma_decode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(.text)
</UL>
<P><STRONG><a name="[6c]"></a>spi_fast_init</STRONG> (ARM, 176 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2e]"></a>spi_dma_refill</STRONG> (ARM, 468 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_int_handler
</UL>

<P><STRONG><a name="[65]"></a>twi_init</STRONG> (ARM, 136 bytes, Stack size 0 bytes, twi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8d]"></a>i2cwtritebyte</STRONG> (ARM, 96 bytes, Stack size 0 bytes, twi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cwrite
</UL>

<P><STRONG><a name="[8c]"></a>i2cwrite</STRONG> (ARM, 72 bytes, Stack size 28 bytes, twi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = i2cwrite
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cwtritebyte
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmc5883_config
</UL>

<P><STRONG><a name="[8f]"></a>i2creadbyte</STRONG> (ARM, 88 bytes, Stack size 0 bytes, twi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cread
</UL>

<P><STRONG><a name="[8e]"></a>i2cread</STRONG> (ARM, 72 bytes, Stack size 28 bytes, twi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2creadbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmc5883_read
</UL>

<P><STRONG><a name="[133]"></a>i2c_eeprom_write_byte</STRONG> (ARM, 96 bytes, Stack size 0 bytes, twi.o(.text), UNUSED)

<P><STRONG><a name="[134]"></a>i2c_eeprom_read_byte</STRONG> (ARM, 108 bytes, Stack size 0 bytes, twi.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>twi_int_handler</STRONG> (ARM, 348 bytes, Stack size 32 bytes, twi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_conclude
</UL>

<P><STRONG><a name="[67]"></a>twi_fast_init</STRONG> (ARM, 60 bytes, Stack size 0 bytes, twi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c0]"></a>twi_cps_read_start</STRONG> (ARM, 104 bytes, Stack size 0 bytes, twi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;continue_cps_read
</UL>

<P><STRONG><a name="[135]"></a>stop_twi_now</STRONG> (ARM, 36 bytes, Stack size 0 bytes, twi.o(.text), UNUSED)

<P><STRONG><a name="[136]"></a>stop_twi_after_complete</STRONG> (ARM, 16 bytes, Stack size 0 bytes, twi.o(.text), UNUSED)

<P><STRONG><a name="[94]"></a>AT91F_USB_SendStall</STRONG> (ARM, 60 bytes, Stack size 0 bytes, usb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT91F_CDC_Enumerate
</UL>

<P><STRONG><a name="[95]"></a>AT91F_USB_SendZlp</STRONG> (ARM, 60 bytes, Stack size 0 bytes, usb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT91F_CDC_Enumerate
</UL>

<P><STRONG><a name="[9e]"></a>AT91F_CDC_Open</STRONG> (ARM, 96 bytes, Stack size 0 bytes, usb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_init
</UL>

<P><STRONG><a name="[9b]"></a>USB_read_Callback</STRONG> (ARM, 16 bytes, Stack size 0 bytes, usb.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_EndpointHandler
</UL>

<P><STRONG><a name="[96]"></a>USB_written_Callback</STRONG> (ARM, 20 bytes, Stack size 8 bytes, usb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_in_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_EndpointHandler
</UL>

<P><STRONG><a name="[9c]"></a>usb_int_handler</STRONG> (ARM, 340 bytes, Stack size 40 bytes, usb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_EndpointHandler
</UL>

<P><STRONG><a name="[9d]"></a>UDP_Write</STRONG> (ARM, 232 bytes, Stack size 24 bytes, usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UDP_Write &rArr; UDP_WritePayload
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_WritePayload
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_write_Raspberry
</UL>

<P><STRONG><a name="[a2]"></a>UDP_Read</STRONG> (ARM, 188 bytes, Stack size 8 bytes, usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UDP_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_read_Raspberry
</UL>

<P><STRONG><a name="[6d]"></a>USB_init</STRONG> (ARM, 152 bytes, Stack size 12 bytes, usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_init
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT91F_CDC_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[137]"></a>USB_int_init</STRONG> (ARM, 52 bytes, Stack size 0 bytes, usb.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>USB_wait_connect</STRONG> (ARM, 56 bytes, Stack size 8 bytes, usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_wait_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_check
</UL>

<P><STRONG><a name="[6f]"></a>USB_armed</STRONG> (ARM, 16 bytes, Stack size 0 bytes, usb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[70]"></a>USB_check</STRONG> (ARM, 128 bytes, Stack size 8 bytes, usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_check &rArr; USB_wait_connect
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_wait_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3b]"></a>USB_write_Raspberry</STRONG> (ARM, 404 bytes, Stack size 104 bytes, usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = USB_write_Raspberry &rArr; UDP_Write &rArr; UDP_WritePayload
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Write
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_in_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process250Hz_A
</UL>

<P><STRONG><a name="[75]"></a>USB_read_Raspberry</STRONG> (ARM, 40 bytes, Stack size 12 bytes, usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_read_Raspberry &rArr; UDP_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[76]"></a>USB_read_Process</STRONG> (ARM, 756 bytes, Stack size 56 bytes, usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USB_read_Process &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[138]"></a>usart_int_handler</STRONG> (ARM, 128 bytes, Stack size 12 bytes, xbee.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>xbee_init</STRONG> (ARM, 260 bytes, Stack size 0 bytes, xbee.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[50]"></a>refill_tx</STRONG> (ARM, 116 bytes, Stack size 16 bytes, xbee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = refill_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process50Hz
</UL>

<P><STRONG><a name="[a4]"></a>crc_update</STRONG> (ARM, 40 bytes, Stack size 0 bytes, xbee.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
</UL>

<P><STRONG><a name="[a3]"></a>crc16</STRONG> (ARM, 72 bytes, Stack size 24 bytes, xbee.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_update
</UL>

<P><STRONG><a name="[a6]"></a>uart_write_char</STRONG> (ARM, 32 bytes, Stack size 0 bytes, xbee.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_data
</UL>

<P><STRONG><a name="[a5]"></a>uart_send_data</STRONG> (ARM, 68 bytes, Stack size 4 bytes, xbee.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_char
</UL>

<P><STRONG><a name="[d5]"></a>__user_initial_stackheap</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sam7.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[a7]"></a>body2glob</STRONG> (ARM, 612 bytes, Stack size 80 bytes, attitudeestimator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = body2glob &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rc
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_geo_acc
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marg_update
</UL>

<P><STRONG><a name="[ac]"></a>inv_sqrt</STRONG> (ARM, 108 bytes, Stack size 32 bytes, attitudeestimator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = inv_sqrt &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marg_update
</UL>

<P><STRONG><a name="[5c]"></a>glob2body</STRONG> (ARM, 616 bytes, Stack size 80 bytes, attitudeestimator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = glob2body &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_loop
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marg_update
</UL>

<P><STRONG><a name="[ae]"></a>marg_update</STRONG> (ARM, 4256 bytes, Stack size 296 bytes, attitudeestimator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = marg_update &rArr; glob2body &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glob2body
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_f
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isfinitef
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_sqrt
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body2glob
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attitude_compute
</UL>

<P><STRONG><a name="[53]"></a>attitude_compute</STRONG> (ARM, 528 bytes, Stack size 56 bytes, attitudeestimator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = attitude_compute &rArr; marg_update &rArr; glob2body &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marg_update
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_loop
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process500Hz
</UL>

<P><STRONG><a name="[b6]"></a>data_2_angle</STRONG> (ARM, 136 bytes, Stack size 80 bytes, attitudeestimator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = data_2_angle &rArr; atan2 &rArr; atan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quarternion_init
</UL>

<P><STRONG><a name="[73]"></a>quarternion_init</STRONG> (ARM, 3432 bytes, Stack size 176 bytes, attitudeestimator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = quarternion_init &rArr; data_2_angle &rArr; atan2 &rArr; atan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;continue_cps_read
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_2_angle
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b8]"></a>internal_err_pid</STRONG> (ARM, 212 bytes, Stack size 56 bytes, controls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = internal_err_pid &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_control
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attitude_control
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;altitude_control
</UL>

<P><STRONG><a name="[b9]"></a>external_err_pid</STRONG> (ARM, 64 bytes, Stack size 32 bytes, controls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = external_err_pid &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_control
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attitude_control
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;altitude_control
</UL>

<P><STRONG><a name="[36]"></a>position_control</STRONG> (ARM, 1632 bytes, Stack size 128 bytes, controls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = position_control &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;external_err_pid
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_err_pid
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process250Hz_A
</UL>

<P><STRONG><a name="[38]"></a>altitude_control</STRONG> (ARM, 368 bytes, Stack size 48 bytes, controls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = altitude_control &rArr; internal_err_pid &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;external_err_pid
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_err_pid
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process250Hz_A
</UL>

<P><STRONG><a name="[37]"></a>manual_R_sp_generate</STRONG> (ARM, 836 bytes, Stack size 56 bytes, controls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = manual_R_sp_generate &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process250Hz_A
</UL>

<P><STRONG><a name="[39]"></a>Qsp2Rsp</STRONG> (ARM, 472 bytes, Stack size 0 bytes, controls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process250Hz_A
</UL>

<P><STRONG><a name="[3a]"></a>set_thrust_force</STRONG> (ARM, 92 bytes, Stack size 0 bytes, controls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process250Hz_A
</UL>

<P><STRONG><a name="[49]"></a>reset_variables</STRONG> (ARM, 104 bytes, Stack size 8 bytes, controls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = reset_variables &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process50Hz
</UL>

<P><STRONG><a name="[55]"></a>attitude_control</STRONG> (ARM, 1200 bytes, Stack size 80 bytes, controls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = attitude_control &rArr; internal_err_pid &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;external_err_pid
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_err_pid
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process500Hz
</UL>

<P><STRONG><a name="[ba]"></a>IIR_set_cutoff_freq</STRONG> (ARM, 528 bytes, Stack size 112 bytes, filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = IIR_set_cutoff_freq &rArr; tan &rArr; __kernel_tan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_IIR_init
</UL>

<P><STRONG><a name="[be]"></a>IIR_apply</STRONG> (ARM, 164 bytes, Stack size 40 bytes, filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IIR_apply &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIR_reset
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_lowpass_biascorr
</UL>

<P><STRONG><a name="[bf]"></a>IIR_reset</STRONG> (ARM, 84 bytes, Stack size 24 bytes, filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = IIR_reset &rArr; IIR_apply &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIR_apply
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_IIR_init
</UL>

<P><STRONG><a name="[72]"></a>gyro_calibration</STRONG> (ARM, 200 bytes, Stack size 24 bytes, imu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gyro_calibration &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[42]"></a>continue_cps_read</STRONG> (ARM, 20 bytes, Stack size 8 bytes, imu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = continue_cps_read
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_cps_read_start
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quarternion_init
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process250Hz_B
</UL>

<P><STRONG><a name="[91]"></a>data_conclude</STRONG> (ARM, 304 bytes, Stack size 12 bytes, imu.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_int_handler
</UL>

<P><STRONG><a name="[8a]"></a>acc_lowpass_biascorr</STRONG> (ARM, 252 bytes, Stack size 32 bytes, imu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = acc_lowpass_biascorr &rArr; IIR_apply &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIR_apply
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dma_decode
</UL>

<P><STRONG><a name="[89]"></a>gyro_lowpass_biascorr</STRONG> (ARM, 180 bytes, Stack size 8 bytes, imu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gyro_lowpass_biascorr
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dma_decode
</UL>

<P><STRONG><a name="[6b]"></a>imu_IIR_init</STRONG> (ARM, 176 bytes, Stack size 16 bytes, imu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = imu_IIR_init &rArr; IIR_set_cutoff_freq &rArr; tan &rArr; __kernel_tan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIR_reset
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIR_set_cutoff_freq
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c1]"></a>force2output</STRONG> (ARM, 132 bytes, Stack size 32 bytes, motormixer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = force2output &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_motors
</UL>

<P><STRONG><a name="[56]"></a>put_motors</STRONG> (ARM, 568 bytes, Stack size 40 bytes, motormixer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = put_motors &rArr; force2output &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;force2output
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set_duty_cycle
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process500Hz
</UL>

<P><STRONG><a name="[47]"></a>gps_pos_init</STRONG> (ARM, 360 bytes, Stack size 40 bytes, positionestimator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = gps_pos_init &rArr; cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_loop
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process50Hz
</UL>

<P><STRONG><a name="[c2]"></a>gps2xyz</STRONG> (ARM, 456 bytes, Stack size 48 bytes, positionestimator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = gps2xyz &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_pos_corr
</UL>

<P><STRONG><a name="[c4]"></a>inertial_filter_correct</STRONG> (ARM, 168 bytes, Stack size 40 bytes, positionestimator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = inertial_filter_correct &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sonar_pos_corr
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_pos_corr
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baro_pos_corr
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zero_pos_corr
</UL>

<P><STRONG><a name="[44]"></a>gps_pos_corr</STRONG> (ARM, 744 bytes, Stack size 64 bytes, positionestimator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = gps_pos_corr &rArr; gps2xyz &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minimum
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_f
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inertial_filter_correct
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps2xyz
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_loop
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process250Hz_B
</UL>

<P><STRONG><a name="[40]"></a>baro_pos_corr</STRONG> (ARM, 232 bytes, Stack size 40 bytes, positionestimator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = baro_pos_corr &rArr; inertial_filter_correct &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inertial_filter_correct
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process250Hz_B
</UL>

<P><STRONG><a name="[c6]"></a>zero_pos_corr</STRONG> (ARM, 328 bytes, Stack size 48 bytes, positionestimator.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_f
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inertial_filter_correct
</UL>

<P><STRONG><a name="[51]"></a>sonar_pos_corr</STRONG> (ARM, 96 bytes, Stack size 16 bytes, positionestimator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sonar_pos_corr &rArr; inertial_filter_correct &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inertial_filter_correct
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process50Hz
</UL>

<P><STRONG><a name="[5d]"></a>corr_geo_acc</STRONG> (ARM, 52 bytes, Stack size 16 bytes, positionestimator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = corr_geo_acc
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_loop
</UL>

<P><STRONG><a name="[58]"></a>get_geo_acc</STRONG> (ARM, 220 bytes, Stack size 32 bytes, positionestimator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = get_geo_acc &rArr; body2glob &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body2glob
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pos_predict
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_loop
</UL>

<P><STRONG><a name="[c7]"></a>inertial_filter_predict</STRONG> (ARM, 80 bytes, Stack size 24 bytes, positionestimator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = inertial_filter_predict &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pos_predict
</UL>

<P><STRONG><a name="[54]"></a>pos_predict</STRONG> (ARM, 520 bytes, Stack size 48 bytes, positionestimator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = pos_predict &rArr; get_geo_acc &rArr; body2glob &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_geo_acc
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inertial_filter_predict
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process500Hz
</UL>

<P><STRONG><a name="[48]"></a>command_init</STRONG> (ARM, 84 bytes, Stack size 8 bytes, radiocontroller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = command_init &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_loop
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process50Hz
</UL>

<P><STRONG><a name="[46]"></a>get_rc</STRONG> (ARM, 892 bytes, Stack size 64 bytes, radiocontroller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = get_rc &rArr; body2glob &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dead_zone
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body2glob
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process50Hz
</UL>

<P><STRONG><a name="[66]"></a>hmc5883_config</STRONG> (ARM, 120 bytes, Stack size 16 bytes, hmc5883.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = hmc5883_config &rArr; i2cwrite
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c9]"></a>hmc5883_read</STRONG> (ARM, 116 bytes, Stack size 16 bytes, hmc5883.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cread
</UL>

<P><STRONG><a name="[6a]"></a>mpu6000_config</STRONG> (ARM, 160 bytes, Stack size 8 bytes, mpu6000_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mpu6000_config &rArr; spi_write_reg &rArr; spi_read_write
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_reg
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ca]"></a>mpu6000_read_all</STRONG> (ARM, 100 bytes, Stack size 16 bytes, mpu6000_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_reg
</UL>

<P><STRONG><a name="[41]"></a>data2tempeture</STRONG> (ARM, 760 bytes, Stack size 16 bytes, ms5611_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = data2tempeture &rArr; __aeabi_ldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_loop
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process250Hz_B
</UL>

<P><STRONG><a name="[3d]"></a>data2pressure</STRONG> (ARM, 96 bytes, Stack size 4 bytes, ms5611_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = data2pressure
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_loop
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process250Hz_B
</UL>

<P><STRONG><a name="[3e]"></a>get_altitude</STRONG> (ARM, 148 bytes, Stack size 40 bytes, ms5611_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = get_altitude &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process250Hz_B
</UL>

<P><STRONG><a name="[cd]"></a>MS5611_RESET</STRONG> (ARM, 28 bytes, Stack size 8 bytes, ms5611_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MS5611_RESET &rArr; spi_read_write
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_write
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611_init
</UL>

<P><STRONG><a name="[69]"></a>MS5611_init</STRONG> (ARM, 168 bytes, Stack size 8 bytes, ms5611_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MS5611_init &rArr; spi_write_1_read_2 &rArr; spi_read_write
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611_RESET
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_1_read_2
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cb]"></a>__aeabi_ldivmod</STRONG> (ARM, 0 bytes, Stack size 8 bytes, llsdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data2tempeture
</UL>

<P><STRONG><a name="[ce]"></a>_ll_sdiv</STRONG> (ARM, 84 bytes, Stack size 8 bytes, llsdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[a1]"></a>__aeabi_memcpy</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refill_tx
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_write_Raspberry
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_read_Process
</UL>

<P><STRONG><a name="[d0]"></a>__rt_memcpy</STRONG> (ARM, 212 bytes, Stack size 0 bytes, rt_memcpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[139]"></a>_memcpy_lastbytes</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>__aeabi_memcpy4</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pos_predict
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_write_Raspberry
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[13a]"></a>__aeabi_memcpy8</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[13b]"></a>__rt_memcpy_w</STRONG> (ARM, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[13c]"></a>_memcpy_lastbytes_aligned</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[13d]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[34]"></a>__aeabi_idivmod</STRONG> (ARM, 384 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sonar_pos_corr
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_variables
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quarternion_init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_motors
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_control
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pos_predict
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_calibration
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_pos_corr
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rc
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gps_data
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_init
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baro_pos_corr
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;altitude_control
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_converted
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_read_Process
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_loop
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_select
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inertial_filter_predict
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zero_pos_corr
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps2xyz
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;force2output
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marg_update
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_handler
</UL>

<P><STRONG><a name="[13e]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[9]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[8]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[cf]"></a>__aeabi_uldivmod</STRONG> (ARM, 0 bytes, Stack size 24 bytes, lludiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
</UL>

<P><STRONG><a name="[13f]"></a>_ll_udiv</STRONG> (ARM, 720 bytes, Stack size 24 bytes, lludiv.o(.text), UNUSED)

<P><STRONG><a name="[140]"></a>_ll_udiv_donemoving</STRONG> (ARM, 0 bytes, Stack size unknown bytes, lludiv.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>__read_errno</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr (via Veneer)
</UL>

<P><STRONG><a name="[d3]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan (via Veneer)
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt (via Veneer)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin (via Veneer)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow (via Veneer)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos (via Veneer)
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin (via Veneer)
</UL>

<P><STRONG><a name="[141]"></a>__user_libspace</STRONG> (ARM, 12 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[d4]"></a>__user_perproc_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[142]"></a>__user_perthread_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[d2]"></a>__aeabi_errno_addr</STRONG> (ARM, 16 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno (via Veneer)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno (via Veneer)
</UL>

<P><STRONG><a name="[143]"></a>__errno$intlibspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[144]"></a>__rt_errno_addr$intlibspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[1f]"></a>__user_setup_stackheap</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[22]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via Veneer)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[145]"></a>__I$use$semihosting</STRONG> (ARM, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[146]"></a>__use_no_semihosting_swi</STRONG> (ARM, 4 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[26]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit (via Veneer)
</UL>

<P><STRONG><a name="[106]"></a>__rt_fp_status_addr</STRONG> (ARM, 16 bytes, Stack size 0 bytes, rt_fp_status_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[147]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv), UNUSED)

<P><STRONG><a name="[2c]"></a>__aeabi_uidivmod</STRONG> (ARM, 36 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div_large
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div2
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div5
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div8
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_get
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppm_get_time
</UL>

<P><STRONG><a name="[e2]"></a>__ARM_fpclassify</STRONG> (ARM, 48 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[af]"></a>__ARM_isfinitef</STRONG> (ARM, 36 bytes, Stack size 0 bytes, attitudeestimator.o(i.__ARM_isfinitef))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marg_update
</UL>

<P><STRONG><a name="[dc]"></a>__ieee754_rem_pio2</STRONG> (ARM, 1216 bytes, Stack size 128 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scalbn
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[df]"></a>__kernel_cos</STRONG> (ARM, 404 bytes, Stack size 48 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scalbn
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[e0]"></a>__kernel_poly</STRONG> (ARM, 256 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[e1]"></a>__kernel_sin</STRONG> (ARM, 372 bytes, Stack size 64 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scalbn
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[e4]"></a>__kernel_tan</STRONG> (ARM, 984 bytes, Stack size 104 bytes, tan_i.o(i.__kernel_tan))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __kernel_tan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scalbn
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan
</UL>

<P><STRONG><a name="[e3]"></a>__mathlib_dbl_underflow</STRONG> (ARM, 20 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[b2]"></a>asin</STRONG> (ARM, 944 bytes, Stack size 56 bytes, asin.o(i.asin))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = asin &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scalbn
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno (via Veneer)
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_control
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attitude_compute
</UL>

<P><STRONG><a name="[e5]"></a>atan</STRONG> (ARM, 828 bytes, Stack size 40 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = atan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scalbn
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>

<P><STRONG><a name="[b3]"></a>atan2</STRONG> (ARM, 568 bytes, Stack size 32 bytes, atan2.o(i.atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = atan2 &rArr; atan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quarternion_init
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_control
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attitude_compute
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_2_angle
</UL>

<P><STRONG><a name="[aa]"></a>cos</STRONG> (ARM, 252 bytes, Stack size 32 bytes, cos.o(i.cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scalbn
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno (via Veneer)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quarternion_init
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_control
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manual_R_sp_generate
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_pos_init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glob2body
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps2xyz
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIR_set_cutoff_freq
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body2glob
</UL>

<P><STRONG><a name="[cc]"></a>pow</STRONG> (ARM, 3832 bytes, Stack size 112 bytes, pow.o(i.pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scalbn
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno (via Veneer)
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_altitude
</UL>

<P><STRONG><a name="[a8]"></a>sin</STRONG> (ARM, 260 bytes, Stack size 32 bytes, sin.o(i.sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scalbn
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno (via Veneer)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quarternion_init
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_control
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manual_R_sp_generate
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glob2body
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps2xyz
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body2glob
</UL>

<P><STRONG><a name="[b1]"></a>sqrt</STRONG> (ARM, 108 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_control
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_2_angle
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marg_update
</UL>

<P><STRONG><a name="[bc]"></a>tan</STRONG> (ARM, 172 bytes, Stack size 32 bytes, tan.o(i.tan))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = tan &rArr; __kernel_tan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scalbn
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno (via Veneer)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIR_set_cutoff_freq
</UL>

<P><STRONG><a name="[7a]"></a>__aeabi_d2f</STRONG> (ARM, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quarternion_init
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_control
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manual_R_sp_generate
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rc
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gps_data
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_altitude
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIR_set_cutoff_freq
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_2_angle
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_to_float
</UL>

<P><STRONG><a name="[e8]"></a>_d2f</STRONG> (ARM, 108 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[ab]"></a>__aeabi_dadd</STRONG> (ARM, 0 bytes, Stack size 16 bytes, daddsub_noclz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quarternion_init
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_control
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glob2body
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rc
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attitude_compute
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;altitude_control
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIR_set_cutoff_freq
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body2glob
</UL>

<P><STRONG><a name="[eb]"></a>_dadd</STRONG> (ARM, 332 bytes, Stack size 16 bytes, daddsub_noclz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[ee]"></a>__fpl_dcheck_NaN1</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scalbn
</UL>

<P><STRONG><a name="[f5]"></a>__fpl_dcmp_Inf</STRONG> (ARM, 28 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[bb]"></a>__aeabi_ddiv</STRONG> (ARM, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rc
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIR_set_cutoff_freq
</UL>

<P><STRONG><a name="[f0]"></a>_ddiv</STRONG> (ARM, 600 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[33]"></a>__aeabi_d2iz</STRONG> (ARM, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_control
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_pos_init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glob2body
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attitude_compute
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;altitude_control
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_select
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps2xyz
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marg_update
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body2glob
</UL>

<P><STRONG><a name="[f1]"></a>_dfix</STRONG> (ARM, 112 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[a9]"></a>__aeabi_i2d</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quarternion_init
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_control
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glob2body
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rc
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attitude_compute
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;altitude_control
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps2xyz
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marg_update
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body2glob
</UL>

<P><STRONG><a name="[148]"></a>_dflt</STRONG> (ARM, 88 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[f3]"></a>__dflt_normalise</STRONG> (ARM, 0 bytes, Stack size unknown bytes, dflt_noclz.o(x$fpl$dflt), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfltu
</UL>

<P><STRONG><a name="[dd]"></a>__aeabi_ui2d</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[f2]"></a>_dfltu</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dfltu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dflt_normalise
</UL>

<P><STRONG><a name="[b4]"></a>__aeabi_cdcmple</STRONG> (ARM, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quarternion_init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attitude_compute
</UL>

<P><STRONG><a name="[f4]"></a>_dcmple</STRONG> (ARM, 148 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[f8]"></a>__fpl_dcmple_InfNaN</STRONG> (ARM, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[32]"></a>__aeabi_dmul</STRONG> (ARM, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quarternion_init
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_control
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_pos_init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glob2body
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rc
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gps_data
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_altitude
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attitude_compute
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;altitude_control
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_select
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps2xyz
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIR_set_cutoff_freq
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body2glob
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_to_float
</UL>

<P><STRONG><a name="[f6]"></a>_dmul</STRONG> (ARM, 372 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[ea]"></a>__fpl_dnaninf</STRONG> (ARM, 192 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[ed]"></a>__fpl_dretinf</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[b5]"></a>__aeabi_cdrcmple</STRONG> (ARM, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quarternion_init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attitude_compute
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[f7]"></a>_drcmple</STRONG> (ARM, 140 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[bd]"></a>__aeabi_drsub</STRONG> (ARM, 0 bytes, Stack size 8 bytes, daddsub_noclz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_altitude
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIR_set_cutoff_freq
</UL>

<P><STRONG><a name="[f9]"></a>_drsb</STRONG> (ARM, 24 bytes, Stack size 8 bytes, daddsub_noclz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[e7]"></a>_dsqrt</STRONG> (ARM, 516 bytes, Stack size 24 bytes, dsqrt_noumaal.o(x$fpl$dsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[b7]"></a>__aeabi_dsub</STRONG> (ARM, 0 bytes, Stack size 32 bytes, daddsub_noclz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quarternion_init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[fc]"></a>_dsub</STRONG> (ARM, 576 bytes, Stack size 32 bytes, daddsub_noclz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[31]"></a>__aeabi_f2d</STRONG> (ARM, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quarternion_init
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_control
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manual_R_sp_generate
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_pos_init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glob2body
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gps_data
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_altitude
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attitude_compute
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_select
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps2xyz
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIR_set_cutoff_freq
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_2_angle
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body2glob
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_to_float
</UL>

<P><STRONG><a name="[fb]"></a>_f2d</STRONG> (ARM, 100 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _f2d &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dsqrt_noumaal.o(x$fpl$dsqrt)
</UL>
<P><STRONG><a name="[5a]"></a>__aeabi_fadd</STRONG> (ARM, 0 bytes, Stack size 16 bytes, faddsub_noclz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pos_predict
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manual_R_sp_generate
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_pos_corr
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baro_pos_corr
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_loop
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zero_pos_corr
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inertial_filter_correct
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIR_reset
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIR_apply
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_err_pid
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_2_angle
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marg_update
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_lowpass_biascorr
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_to_float
</UL>

<P><STRONG><a name="[fe]"></a>_fadd</STRONG> (ARM, 196 bytes, Stack size 16 bytes, faddsub_noclz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[102]"></a>__fpl_fcmp_Inf</STRONG> (ARM, 28 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
</UL>

<P><STRONG><a name="[5b]"></a>__aeabi_fdiv</STRONG> (ARM, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_control
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manual_R_sp_generate
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_pos_init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_pos_corr
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glob2body
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_altitude
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baro_pos_corr
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attitude_compute
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_loop
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zero_pos_corr
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIR_reset
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIR_set_cutoff_freq
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_err_pid
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marg_update
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body2glob
</UL>

<P><STRONG><a name="[100]"></a>_fdiv</STRONG> (ARM, 396 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[c3]"></a>__aeabi_cfcmpeq</STRONG> (ARM, 0 bytes, Stack size 16 bytes, feqf.o(x$fpl$feqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps2xyz
</UL>

<P><STRONG><a name="[101]"></a>_fcmpeq</STRONG> (ARM, 132 bytes, Stack size 16 bytes, feqf.o(x$fpl$feqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[3f]"></a>__aeabi_f2iz</STRONG> (ARM, 0 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quarternion_init
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_control
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pos_predict
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manual_R_sp_generate
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_IIR_init
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gps_data
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_geo_acc
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_loop
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process250Hz_B
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inertial_filter_correct
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;external_err_pid
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_err_pid
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marg_update
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_lowpass_biascorr
</UL>

<P><STRONG><a name="[103]"></a>_ffix</STRONG> (ARM, 68 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[59]"></a>__aeabi_i2f</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fflt_noclz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quarternion_init
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_control
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pos_predict
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manual_R_sp_generate
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_pos_init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_pos_corr
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glob2body
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_geo_acc
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_altitude
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;corr_geo_acc
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baro_pos_corr
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attitude_compute
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_loop
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zero_pos_corr
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inertial_filter_correct
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;external_err_pid
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_err_pid
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marg_update
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body2glob
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_lowpass_biascorr
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_to_float
</UL>

<P><STRONG><a name="[149]"></a>_fflt</STRONG> (ARM, 92 bytes, Stack size 0 bytes, fflt_noclz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[14a]"></a>__fflt_normalise</STRONG> (ARM, 0 bytes, Stack size unknown bytes, fflt_noclz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[28]"></a>__aeabi_cfcmple</STRONG> (ARM, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_f
</UL>

<P><STRONG><a name="[104]"></a>_fcmple</STRONG> (ARM, 132 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[108]"></a>__fpl_fcmple_InfNaN</STRONG> (ARM, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
</UL>

<P><STRONG><a name="[79]"></a>__aeabi_fmul</STRONG> (ARM, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quarternion_init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pos_predict
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manual_R_sp_generate
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_pos_corr
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gps_data
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baro_pos_corr
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zero_pos_corr
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inertial_filter_correct
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIR_apply
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIR_set_cutoff_freq
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;external_err_pid
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_err_pid
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_2_angle
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marg_update
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_sqrt
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_to_float
</UL>

<P><STRONG><a name="[105]"></a>_fmul</STRONG> (ARM, 256 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[fd]"></a>__fpl_fnaninf</STRONG> (ARM, 168 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[1d]"></a>_fp_init</STRONG> (ARM, 24 bytes, Stack size 8 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_fp_status_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[14b]"></a>__fplib_config_pureend_doubles</STRONG> (ARM, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[e9]"></a>__fpl_fretinf</STRONG> (ARM, 16 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[29]"></a>__aeabi_cfrcmple</STRONG> (ARM, 0 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_f
</UL>

<P><STRONG><a name="[107]"></a>_frcmple</STRONG> (ARM, 124 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmple_InfNaN
</UL>

<P><STRONG><a name="[ad]"></a>__aeabi_frsub</STRONG> (ARM, 0 bytes, Stack size 0 bytes, faddsub_noclz.o(x$fpl$frsb))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_pos_corr
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIR_apply
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_sqrt
</UL>

<P><STRONG><a name="[109]"></a>_frsb</STRONG> (ARM, 20 bytes, Stack size 0 bytes, faddsub_noclz.o(x$fpl$frsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[b0]"></a>__aeabi_fsub</STRONG> (ARM, 0 bytes, Stack size 16 bytes, faddsub_noclz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manual_R_sp_generate
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_geo_acc
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIR_apply
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIR_set_cutoff_freq
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marg_update
</UL>

<P><STRONG><a name="[10b]"></a>_fsub</STRONG> (ARM, 304 bytes, Stack size 16 bytes, faddsub_noclz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[ef]"></a>__fpl_return_NaN</STRONG> (ARM, 116 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[e6]"></a>__ARM_scalbn</STRONG> (ARM, 0 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[de]"></a>scalbn</STRONG> (ARM, 108 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_infinity (Weak Reference)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[14c]"></a>__fpl_inf_scalbn</STRONG> (ARM, 0 bytes, Stack size unknown bytes, scalbn.o(x$fpl$scalbn), UNUSED)

<P><STRONG><a name="[10c]"></a>__fpl_cmpreturn</STRONG> (ARM, 60 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>

<P><STRONG><a name="[14d]"></a>__I$use$fp</STRONG> (ARM, 0 bytes, Stack size unknown bytes, usenofp.o(x$fpl$usenofp), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[93]"></a>AT91F_USB_SendData</STRONG> (ARM, 216 bytes, Stack size 8 bytes, usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AT91F_USB_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT91F_CDC_Enumerate
</UL>

<P><STRONG><a name="[92]"></a>AT91F_CDC_Enumerate</STRONG> (ARM, 1272 bytes, Stack size 40 bytes, usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AT91F_CDC_Enumerate &rArr; AT91F_USB_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT91F_USB_SendZlp
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT91F_USB_SendStall
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT91F_USB_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT91F_UDP_IsConfigured
</UL>

<P><STRONG><a name="[17]"></a>AT91F_UDP_IsConfigured</STRONG> (ARM, 104 bytes, Stack size 16 bytes, usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AT91F_UDP_IsConfigured &rArr; AT91F_CDC_Enumerate &rArr; AT91F_USB_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT91F_CDC_Enumerate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb.o(.text)
</UL>
<P><STRONG><a name="[99]"></a>UDP_ClearRXFlag</STRONG> (ARM, 148 bytes, Stack size 0 bytes, usb.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_EndpointHandler
</UL>

<P><STRONG><a name="[98]"></a>UDP_WritePayload</STRONG> (ARM, 200 bytes, Stack size 4 bytes, usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UDP_WritePayload
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_Write
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_EndpointHandler
</UL>

<P><STRONG><a name="[9a]"></a>UDP_GetPayload</STRONG> (ARM, 232 bytes, Stack size 8 bytes, usb.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_EndpointHandler
</UL>

<P><STRONG><a name="[97]"></a>UDP_EndpointHandler</STRONG> (ARM, 944 bytes, Stack size 24 bytes, usb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_written_Callback
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_read_Callback
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_GetPayload
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_WritePayload
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_ClearRXFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_int_handler
</UL>

<P><STRONG><a name="[f]"></a>Undef_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, sam7.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sam7.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>SWI_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, sam7.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sam7.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>PAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, sam7.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sam7.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>DAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, sam7.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sam7.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>IRQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, sam7.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sam7.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>FIQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, sam7.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sam7.o(RESET)
</UL>
<P><STRONG><a name="[da]"></a>__arm_div8</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[d9]"></a>__arm_div5</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[d8]"></a>__arm_div2</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[db]"></a>__arm_div_large</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[fa]"></a>_dadd1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, daddsub_noclz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[ec]"></a>_dsub1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, daddsub_noclz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[10a]"></a>_fadd1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, faddsub_noclz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
</UL>

<P><STRONG><a name="[ff]"></a>_fsub1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, faddsub_noclz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[10d]"></a>__fpl_infinity</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scalbn
</UL>

<P><STRONG><a name="[d6]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
